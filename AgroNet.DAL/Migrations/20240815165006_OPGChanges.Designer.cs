// <auto-generated />
using System;
using AgroNet.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgroNet.DAL.Migrations
{
    [DbContext(typeof(AgroNetDbContext))]
    [Migration("20240815165006_OPGChanges")]
    partial class OPGChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AgroNet.Model.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("VlasnikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AgroNet.Model.Djelatnost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Djelatnosti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "PROIZVODNJA POLJOPRIVREDNIH I PREHRAMBENIH PROIZVODA",
                            Opis = "1.1.\r\nproizvodnja poljoprivrednih proizvoda od sirovine dijelom iz vlastite proizvodnje uz kupnju do 50%\r\nsirovine drugih poljoprivrednih gospodarstva u dijelu proizvodnje alkoholnih pića i octa, piva do 2.000\r\nhl, vina od grožđa, voćnog vina, likera, rakija, ostalih alkoholna pića i sl.,\r\n1.2.\r\nproizvodnja prehrambenih proizvoda od sirovine dijelom iz vlastite proizvodnje uz kupnju do 50%\r\nsirovine od drugih poljoprivrednih gospodarstva (osim kupnje mlijeka i mesa) radi proizvodnje sirupa,\r\nsokova, ulja, džemova, pekmeza, kruha, kolača, kroštula, tjestenina, arancina,\r\nsušenog/zamrznutog/konzerviranog voća, povrća i sl.,\r\n1.3.\r\npakiranje i/ili zamrzavanje i/ili sušenje i/ili konzerviranje proizvoda od sirovine dijelom iz vlastite\r\nproizvodnje uz kupnju do 50% sirovine drugih poljoprivrednih gospodarstva u dijelu proizvoda od gljiva,\r\nšumskih plodova, samoniklog, uzgojenog i ostalog bilja i sl. .\r\n"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "IZRADA NEPREHRAMBENIH PROIZVODA I PREDMETA OPĆE UPORABE",
                            Opis = "2.1.\r\nizrada proizvoda od drva (drvene motke grubo uobličene, netokarene i drugi proizvodi od drva, drvna\r\nšindru i slično), izrada zaprežnih kola i drugih drvenih poljoprivrednih alata te izrada tradicijskog\r\nnamještaja povezano sa zanimanjima tradicijskih obrta i/ili tradicijskim vještinama;\r\n2.2.\r\nizrada proizvoda od slame i drugih pletarskih materijala (bambus, ratan, trska, rogoz, vrbovo pruće,\r\nrafija, očišćena, bijeljena ili bojena slama žitarica te lipova kora) povezano sa zanimanjima tradicijskih\r\nobrta i/ili tradicijskim vještinama;\r\n2.3. izrada rukotvorina, nakita, igračaka i suvenira od tkanine, kože, kamena, gline, stakla i drugih materijala\r\npovezano sa zanimanjima tradicijskih obrta i/ili tradicijskim vještinama;\r\n2.4. izrada proizvoda od pčelinjeg voska, sapuna, drugih neprehrambenih proizvoda i predmeta opće\r\nupotrebe povezano sa zanimanjima tradicijskih obrta i/ili tradicijskim vještinama;\r\n2.5. izrada eteričnih ulja, kozmetičkih proizvoda i drugih neprehrambenih proizvoda i predmeta opće\r\nupotrebe;\r\n2.6.\r\nizrada proizvoda od konca i vune (pletenje, vezenje, kukičanje, proizvodnja proizvoda od čipke,\r\nproizvoda od filcane vune, izrada tradicijske odjeće i narodnih nošnji) povezano sa zanimanjima\r\ntradicijskih obrta i/ili tradicijskim vještinama;\r\n2.7. izrada proizvoda od svježeg i sušenog cvijeća i drugog bilja povezano sa zanimanjima tradicijskih obrta\r\ni/ili tradicijskim vještinama;\r\n2.8.\r\nizrada ostalih proizvoda od drva (cijepani kolci; drveni kolci i stupovi, zašiljeni ali uzdužno nepiljeni) te\r\nizrada, pakiranje, obrada, prerada ogrjevnog drva u obliku oblica, cjepanica, pruća, snopova ili sličnih\r\noblika (paletirani, briketirani, piletirani);"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "PRUŽANJE USLUGA",
                            Opis = "3.1.\r\npružanje usluga s poljoprivrednom i šumskom mehanizacijom opremom, uređajima i/ili alatima koje\r\nobuhvaćaju rad s traktorima i drugim poljoprivrednim strojevima u komunalnim poslovima (zimsko\r\nodržavanje cesta i putova, čišćenje, košnja i održavanje zelenila i zelenih površina);\r\n3.2. pružanje usluga s poljoprivrednom i šumskom mehanizacijom, opremom, uređajima i/ili alatima u\r\ngrađevinskim poslovima (iskop, ravnanje, dovoz, odvoz i slično);\r\n3.3.\r\nusluge u šumarstvu s poljoprivrednom i šumskom mehanizacijom, opremom, uređajima opremom,\r\nuređajima i/ili alatima koje obuhvaćaju sječu drva, izvlačenje drva iz šume, izradu trupaca, drvne sječke,\r\npiljenje drva i slično; 3.4.\r\nusluge s radnim životinjama u poljoprivrednim i šumsko-gospodarskim poslovima koje obuhvaćaju\r\nprijenos, prijevoz poljoprivrednih proizvoda i obavljanje poljoprivrednih poslova sa životinjama,\r\niznošenje i izvlačenje drva iz šume sa životinjama i slično;\r\n3.5.\r\nusluge s radnim životinjama u ostalim aktivnostima, (vožnja kočijom, jahanje i obuka u jahanju,\r\nterapijsko jahanje, obuka, treniranje i/ili korištenje radnih životinja (konja, pasa i drugih) i slično\r\npovezano s ruralnim običajima i/ili tradicijskim vještinama;\r\n3.6.\r\nostale usluge, aktivnosti i savjeti vezani uz držanje životinja, uzgoj bilja i preradu poljoprivrednih\r\nproizvoda (striža/šišanje ovaca, cijepljenje i orezivanje voćki i vinove loze, zbrinjavanje rojeva pčela,\r\nuklanjanje osa, biodinamički uzgoj povrtnog bilja i slično);\r\n3.7.\r\nostale usluge i aktivnosti u korištenju raspoloživih radnih resursa gospodarstva (uslužni prijevoz mlijeka,\r\nprijevoz poljoprivrednih proizvoda, prijevoz životinja, održavanje grobova, uslužna dorada i/ili pakiranje\r\ni/ili skladištenje poljoprivrednih i/ili prehrambenih proizvoda i slično)"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "PRUŽANJE TURISTIČKIH I UGOSTITELJSKIH USLUGA",
                            Opis = "4.1. pružanje ugostiteljskih usluga u objektima koji mogu biti: vinotočje/kušaonice, izletište, sobe,\r\napartmani, ruralne kuće za odmor, kamp;\r\n4.2.\r\npružanje turističkih usluga koje mogu biti: omogućavanje sudjelovanja u poljoprivrednim aktivnostima\r\nkao što su berba voća i povrća, ubiranje ljetine i sl., lov i ribolov, vožnja kočijom, čamcem, biciklom,\r\njahanje, pješačenje i slične aktivnosti te iznajmljivanje sredstava, pribora i opreme za te aktivnosti;\r\nprovođenje programa kreativnih i edukativnih radionica vezanih uz poljoprivredu, tradicijske obrte i sl.,\r\nprezentacija poljoprivrednoga gospodarstva te prirodnih i kulturnih vrijednosti u okviru istog, posjete\r\nregistriranim privatnim etno zbirkama i sl. organizacija izleta za goste koji koriste usluge smještaja;\r\nomogućavanje prostora za piknik i izlet; omogućavanje korištenja žičare, vučnice, uspinjače i sl.,;\r\n"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "PRUŽANJE OSTALIH SADRŽAJA I AKTIVNOSTI",
                            Opis = "5.1. omogućavanje stjecanja znanja i vještina o uzgoju bilja i životinja;\r\n5.2. omogućavanje organiziranja tečajeva za izradu tradicijskih proizvoda i rukotvorina;\r\n5.3. omogućavanje edukacijskih praktikuma i/ili omogućavanje održavanja radionica, tečajeva, seminara i\r\nedukacija iz registrirane dopunske djelatnosti OPG-a;\r\n5.4\r\nproizvodnja i isporuka energije iz obnovljivih izvora od poljoprivredne i/ili šumske biomase, stajskog\r\ngnoja, gnojovke, gnojnice, drugih izvora biomase, vode, vjetra i sunca do snage 1MW nominalne snage\r\ngeneratora (kotla);\r\n5.5 proizvodnja i isporuka organskih gnojiva (humusa, glisnjaka i drugih) proizvedenih na OPG-u;\r\n5.6. uzgoj i isporuka divljači, uzgoj rakova, žaba, slatkovodni uzgoj riba – aquakultura na OPG-u;\r\n5.7. uzgoj ostalih nespomenutih biljnih vrsta (drveća, grmlja, cvijeća, božićnih drvaca i ukrasnog bilja) na\r\nOPG-u;\r\n5.8. sudjelovanje na manifestacijama prikazivanjem aktivnosti i djelatnosti OPG-a vezanih s ruralnim\r\nobičajima, zanimanjima tradicijskih obrta i/ili tradicijskim vještinama;\r\n5.9. sakupljanje samoniklog bilja (aromatičnog, začinskog i dr.), gljiva, šumskih plodova (borovnica, šipka,\r\nkupina, kestena, žira i dr.) i ostalog bilja"
                        });
                });

            modelBuilder.Entity("AgroNet.Model.DjelatnostiOPG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DjelatnostId")
                        .HasColumnType("int");

                    b.Property<int>("OPGId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DjelatnostId");

                    b.HasIndex("OPGId");

                    b.ToTable("DjelatnostiOPG");
                });

            modelBuilder.Entity("AgroNet.Model.Imanje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Katastar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Povrsina")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Imanja");
                });

            modelBuilder.Entity("AgroNet.Model.ImanjeVlasnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ImanjeId")
                        .HasColumnType("int");

                    b.Property<int>("ProizvodId")
                        .HasColumnType("int");

                    b.Property<int>("VlasnikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImanjeId");

                    b.HasIndex("ProizvodId");

                    b.HasIndex("VlasnikId");

                    b.ToTable("ImanjaVlasnici");
                });

            modelBuilder.Entity("AgroNet.Model.Mjesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostanskiBroj")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ZupanijaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZupanijaId");

                    b.ToTable("Mjesta");
                });

            modelBuilder.Entity("AgroNet.Model.Narudzba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DatumIsporuke")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumNarudzbe")
                        .HasColumnType("datetime2");

                    b.Property<int>("KupacOPGId")
                        .HasColumnType("int");

                    b.Property<int>("ProdavacOPGId")
                        .HasColumnType("int");

                    b.Property<int>("StatusNarudzbeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KupacOPGId");

                    b.HasIndex("ProdavacOPGId");

                    b.HasIndex("StatusNarudzbeId");

                    b.ToTable("Narudzbe");
                });

            modelBuilder.Entity("AgroNet.Model.OPG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MjestoId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MjestoId");

                    b.ToTable("OPGs");
                });

            modelBuilder.Entity("AgroNet.Model.OPGProizvod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OPGId")
                        .HasColumnType("int");

                    b.Property<int>("ProizvodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OPGId");

                    b.HasIndex("ProizvodId");

                    b.ToTable("OPGProizvodi");
                });

            modelBuilder.Entity("AgroNet.Model.OPGStrojeviAlati", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OPGId")
                        .HasColumnType("int");

                    b.Property<int>("StrojAlatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OPGId");

                    b.HasIndex("StrojAlatId");

                    b.ToTable("OPGStrojeviAlati");
                });

            modelBuilder.Entity("AgroNet.Model.OPGUsluga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OPGId")
                        .HasColumnType("int");

                    b.Property<int>("UslugaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OPGId");

                    b.HasIndex("UslugaId");

                    b.ToTable("OPGUsluge");
                });

            modelBuilder.Entity("AgroNet.Model.Proizvod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VrstaProizvodaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VrstaProizvodaId");

                    b.ToTable("Proizvodi");
                });

            modelBuilder.Entity("AgroNet.Model.StatusNarudzbe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusiNarudzbi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "U obradi",
                            Opis = "Narudžba je podnesena. Čeka se vlasnik da potvrdi narudžbu."
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Potvrđeno",
                            Opis = "Narudžba je potvrđena. Vlasnik će uskoro izvržiti narudžbu."
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Izvršava se",
                            Opis = "Narudžba se trenutno izvršava."
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Završeno",
                            Opis = "Narudžba je u cijelosti završena."
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Odbijeno",
                            Opis = "Vlasnik je odbio narudžbu."
                        },
                        new
                        {
                            Id = 6,
                            Naziv = "Otkazano",
                            Opis = "Narudžba je otkazana."
                        });
                });

            modelBuilder.Entity("AgroNet.Model.StavkaNarudzbeProizvod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("JedinicnaCijena")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int>("NarudzbaId")
                        .HasColumnType("int");

                    b.Property<int>("ProizvodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NarudzbaId");

                    b.HasIndex("ProizvodId");

                    b.ToTable("StavkeNarudzbeProizvoda");
                });

            modelBuilder.Entity("AgroNet.Model.StavkaNarudzbeUsluga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("JedinicnaCijena")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int>("NarudzbaId")
                        .HasColumnType("int");

                    b.Property<int>("UslugaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NarudzbaId");

                    b.HasIndex("UslugaId");

                    b.ToTable("StavkeNarudzbeUsluga");
                });

            modelBuilder.Entity("AgroNet.Model.StrojAlat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VrstaStrojaAlataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VrstaStrojaAlataId");

                    b.ToTable("StrojeviAlati");
                });

            modelBuilder.Entity("AgroNet.Model.Usluga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VrstaUslugeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VrstaUslugeId");

                    b.ToTable("Usluge");
                });

            modelBuilder.Entity("AgroNet.Model.Vlasnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrojTelefona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MjestoPrebivalistaId")
                        .HasColumnType("int");

                    b.Property<string>("OIB")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MjestoPrebivalistaId");

                    b.ToTable("Vlasnici");
                });

            modelBuilder.Entity("AgroNet.Model.VlasnikOPG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OPGId")
                        .HasColumnType("int");

                    b.Property<int>("VlasnikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OPGId");

                    b.HasIndex("VlasnikId");

                    b.ToTable("VlasniciOPG");
                });

            modelBuilder.Entity("AgroNet.Model.VrstaProizvoda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VrsteProizvoda");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Meso i mesne prerađevine"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Riba, morski plodovi i mekušci"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Povrće"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Voće"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Žitarice"
                        },
                        new
                        {
                            Id = 6,
                            Naziv = "Stoka"
                        },
                        new
                        {
                            Id = 7,
                            Naziv = "Perad"
                        },
                        new
                        {
                            Id = 8,
                            Naziv = "Orašasti plodovi"
                        },
                        new
                        {
                            Id = 9,
                            Naziv = "Mlijeko i mlječni prozivodi"
                        },
                        new
                        {
                            Id = 10,
                            Naziv = "Ulja i masti"
                        },
                        new
                        {
                            Id = 11,
                            Naziv = "Sjeme i sadnice"
                        },
                        new
                        {
                            Id = 12,
                            Naziv = "Ostalo"
                        });
                });

            modelBuilder.Entity("AgroNet.Model.VrstaStrojaAlata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VrsteStrojevaAlata");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Traktor"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Kombajn"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Sjetva, žetva i berba"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Obrada tla"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Zaštita, gnojidba, navodnjavanje"
                        },
                        new
                        {
                            Id = 6,
                            Naziv = "Transport i pretovar"
                        });
                });

            modelBuilder.Entity("AgroNet.Model.VrstaUsluge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VrsteUsluga");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Poljoprivredna mehanizacija i oprema"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Ugostiteljske i turističke usluge"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Šumska mehanizacija i oprema"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Građevinska mehanizacija i oprema"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Usluge s radnim životinjama"
                        },
                        new
                        {
                            Id = 6,
                            Naziv = "Aktivnost i savjetovanje"
                        },
                        new
                        {
                            Id = 7,
                            Naziv = "Ostalo"
                        });
                });

            modelBuilder.Entity("AgroNet.Model.Zupanija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Zupanije");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Zagrebačka županija"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Krapinsko-zagorska županija"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Sisačko-moslavačka županija"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Karlovačka županija"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Varaždinska županija"
                        },
                        new
                        {
                            Id = 6,
                            Naziv = "Koprivničko-križevačka županija"
                        },
                        new
                        {
                            Id = 7,
                            Naziv = "Bjelovarsko-bilogorska županija"
                        },
                        new
                        {
                            Id = 8,
                            Naziv = "Primorsko-goranska županija"
                        },
                        new
                        {
                            Id = 9,
                            Naziv = "Ličko-senjska županija"
                        },
                        new
                        {
                            Id = 10,
                            Naziv = "Virovitičko-podravska županija"
                        },
                        new
                        {
                            Id = 11,
                            Naziv = "Požeško-slavonska županija"
                        },
                        new
                        {
                            Id = 12,
                            Naziv = "Brodsko-posavska županija"
                        },
                        new
                        {
                            Id = 13,
                            Naziv = "Zadarska županija"
                        },
                        new
                        {
                            Id = 14,
                            Naziv = "Osječko-baranjska županija"
                        },
                        new
                        {
                            Id = 15,
                            Naziv = "Šibensko-kninska županija"
                        },
                        new
                        {
                            Id = 16,
                            Naziv = "Vukovarsko-srijemska županija"
                        },
                        new
                        {
                            Id = 17,
                            Naziv = "Splitsko-dalmatinska županija"
                        },
                        new
                        {
                            Id = 18,
                            Naziv = "Istarska županija"
                        },
                        new
                        {
                            Id = 19,
                            Naziv = "Dubrovačko-neretvanska županija"
                        },
                        new
                        {
                            Id = 20,
                            Naziv = "Međimurska županija"
                        },
                        new
                        {
                            Id = 21,
                            Naziv = "Grad Zagreb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AgroNet.Model.DjelatnostiOPG", b =>
                {
                    b.HasOne("AgroNet.Model.Djelatnost", "Djelatnost")
                        .WithMany()
                        .HasForeignKey("DjelatnostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroNet.Model.OPG", "OPG")
                        .WithMany()
                        .HasForeignKey("OPGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Djelatnost");

                    b.Navigation("OPG");
                });

            modelBuilder.Entity("AgroNet.Model.ImanjeVlasnik", b =>
                {
                    b.HasOne("AgroNet.Model.Imanje", "Imanje")
                        .WithMany()
                        .HasForeignKey("ImanjeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroNet.Model.Proizvod", "Proizvod")
                        .WithMany()
                        .HasForeignKey("ProizvodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroNet.Model.Vlasnik", "Vlasnik")
                        .WithMany()
                        .HasForeignKey("VlasnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Imanje");

                    b.Navigation("Proizvod");

                    b.Navigation("Vlasnik");
                });

            modelBuilder.Entity("AgroNet.Model.Mjesto", b =>
                {
                    b.HasOne("AgroNet.Model.Zupanija", "Zupanija")
                        .WithMany()
                        .HasForeignKey("ZupanijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zupanija");
                });

            modelBuilder.Entity("AgroNet.Model.Narudzba", b =>
                {
                    b.HasOne("AgroNet.Model.OPG", "KupacOPG")
                        .WithMany()
                        .HasForeignKey("KupacOPGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroNet.Model.OPG", "ProdavacOPG")
                        .WithMany()
                        .HasForeignKey("ProdavacOPGId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgroNet.Model.StatusNarudzbe", "StatusNarudzbe")
                        .WithMany()
                        .HasForeignKey("StatusNarudzbeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KupacOPG");

                    b.Navigation("ProdavacOPG");

                    b.Navigation("StatusNarudzbe");
                });

            modelBuilder.Entity("AgroNet.Model.OPG", b =>
                {
                    b.HasOne("AgroNet.Model.Mjesto", "Mjesto")
                        .WithMany()
                        .HasForeignKey("MjestoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mjesto");
                });

            modelBuilder.Entity("AgroNet.Model.OPGProizvod", b =>
                {
                    b.HasOne("AgroNet.Model.OPG", "OPG")
                        .WithMany()
                        .HasForeignKey("OPGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroNet.Model.Proizvod", "Proizvod")
                        .WithMany()
                        .HasForeignKey("ProizvodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OPG");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("AgroNet.Model.OPGStrojeviAlati", b =>
                {
                    b.HasOne("AgroNet.Model.OPG", "OPG")
                        .WithMany()
                        .HasForeignKey("OPGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroNet.Model.StrojAlat", "StrojAlat")
                        .WithMany()
                        .HasForeignKey("StrojAlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OPG");

                    b.Navigation("StrojAlat");
                });

            modelBuilder.Entity("AgroNet.Model.OPGUsluga", b =>
                {
                    b.HasOne("AgroNet.Model.OPG", "OPG")
                        .WithMany()
                        .HasForeignKey("OPGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroNet.Model.Usluga", "Usluga")
                        .WithMany()
                        .HasForeignKey("UslugaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OPG");

                    b.Navigation("Usluga");
                });

            modelBuilder.Entity("AgroNet.Model.Proizvod", b =>
                {
                    b.HasOne("AgroNet.Model.VrstaProizvoda", "VrstaProizvoda")
                        .WithMany()
                        .HasForeignKey("VrstaProizvodaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VrstaProizvoda");
                });

            modelBuilder.Entity("AgroNet.Model.StavkaNarudzbeProizvod", b =>
                {
                    b.HasOne("AgroNet.Model.Narudzba", "Narudzba")
                        .WithMany()
                        .HasForeignKey("NarudzbaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroNet.Model.Proizvod", "Proizvod")
                        .WithMany()
                        .HasForeignKey("ProizvodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Narudzba");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("AgroNet.Model.StavkaNarudzbeUsluga", b =>
                {
                    b.HasOne("AgroNet.Model.Narudzba", "Narudzba")
                        .WithMany()
                        .HasForeignKey("NarudzbaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroNet.Model.Usluga", "Usluga")
                        .WithMany()
                        .HasForeignKey("UslugaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Narudzba");

                    b.Navigation("Usluga");
                });

            modelBuilder.Entity("AgroNet.Model.StrojAlat", b =>
                {
                    b.HasOne("AgroNet.Model.VrstaStrojaAlata", "VrstaStrojaAlata")
                        .WithMany()
                        .HasForeignKey("VrstaStrojaAlataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VrstaStrojaAlata");
                });

            modelBuilder.Entity("AgroNet.Model.Usluga", b =>
                {
                    b.HasOne("AgroNet.Model.VrstaUsluge", "VrstaUsluge")
                        .WithMany()
                        .HasForeignKey("VrstaUslugeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VrstaUsluge");
                });

            modelBuilder.Entity("AgroNet.Model.Vlasnik", b =>
                {
                    b.HasOne("AgroNet.Model.Mjesto", "MjestoPrebivalista")
                        .WithMany()
                        .HasForeignKey("MjestoPrebivalistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MjestoPrebivalista");
                });

            modelBuilder.Entity("AgroNet.Model.VlasnikOPG", b =>
                {
                    b.HasOne("AgroNet.Model.OPG", "OPG")
                        .WithMany()
                        .HasForeignKey("OPGId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgroNet.Model.Vlasnik", "Vlasnik")
                        .WithMany()
                        .HasForeignKey("VlasnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OPG");

                    b.Navigation("Vlasnik");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AgroNet.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AgroNet.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroNet.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AgroNet.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
